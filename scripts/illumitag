#!/usr/bin/env python

"""
Parses the command line options using optparse.
"""

# Built-in modules #
import os, sys, optparse, inspect

###############################################################################
# Special module location #
self_path = inspect.getfile(inspect.currentframe())
presumed_module_dir = os.path.abspath(os.path.dirname(self_path) + '/../')
sys.path.insert(0, presumed_module_dir)

# Imports #
import illumitag
from illumitag.helper import dependencies
from illumitag.common import Color

# Check dependencies #
dependencies.check_modules()
dependencies.check_executables()

# Now we can have other modules #
import sh

# Where the module is #
module_dir = os.path.dirname(illumitag.__file__)
project_dir = os.path.abspath(module_dir + '/../')

# If the module is a git repository, get the hash #
if os.path.exists(project_dir + '/.git'):
    version = sh.git("--git-dir=" + project_dir + '/.git', "describe", "--tags", "--dirty", "--always").strip('\n')
else:
    version = illumitag.__version__

###############################################################################
# The long description #
description = """
A python package.
An example usage is the following:
"$ illumitag pool1"
"""

# Options #
option_list = [
    optparse.make_option("-s", "--steps", type="string", help="Steps to run")
]

# All the help messages #
parameters = {
    'usage'   : '%prog POOL',
    'version' : illumitag.__version__,
    'epilog'  : 'Using version %s from %s' % (version, module_dir),
    'description' : description,
    'option_list' : option_list,
}

# Optparse is deprecated as of 2.7 #
parser = optparse.OptionParser(**parameters)
options, args = parser.parse_args()

# Check the positional arguments we got #
if len(args) < 1:
    parser.error("You need to specify a pool")

###############################################################################
# Everything is ok, start program #
print "Using version %s%s%s from %s" % (Color.b_grn, version, Color.end, module_dir)
sys.stdout.flush()

# Send the arguments we got #
directory = args[0]
if options.steps: ex = illumitag.run_exp(directory, options.steps)
else:             ex = illumitag.run_exp(directory)

# Report success #
print "Success: results are in '%s'" % os.path.abspath(ex.base_dir)